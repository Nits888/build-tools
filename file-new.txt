import React, { useState, useEffect, useCallback } from 'react';
import data from './data.json'; // Adjust the path as necessary

// Mock EzyOptionSelector component for demonstration purposes
const EzyOptionSelector = ({ options, label, addNew, selected, onSelect }) => (
  <div>
    <label>{label}</label>
    <select value={selected} onChange={(e) => onSelect(e.target.value)}>
      <option value="">Select {label}</option>
      {options.map((option) => (
        <option key={option} value={option}>
          {option}
        </option>
      ))}
    </select>
  </div>
);

const DependentSelect = () => {
  const [issue, setIssue] = useState({
    acSelection: '',
    sacSelection: '',
    ownerSelection: '',
    applicationSelection: ''
  });

  const { acSelection, sacSelection, ownerSelection, applicationSelection } = issue;

  // `handleChange` function to update state based on the selected value
  const handleChange = useCallback(
    (key, value) => {
      setIssue(prevIssue => ({
        ...prevIssue,
        [key]: value
      }));
    },
    []
  );

  // Update sacOptions when acSelection changes
  useEffect(() => {
    if (acSelection) {
      setSacOptions(Object.keys(data[acSelection] || {}));
    } else {
      setSacOptions([]);
      setOwnerOptions([]);
      setApplicationOptions([]);
    }
  }, [acSelection]);

  // Update ownerOptions when acSelection or sacSelection changes
  useEffect(() => {
    if (acSelection && sacSelection) {
      const selectedSac = data[acSelection][sacSelection] || [];
      const owners = [...new Set(selectedSac.map(item => item.Owner))];
      setOwnerOptions(owners);
    } else {
      setOwnerOptions([]);
      setApplicationOptions([]);
    }
  }, [acSelection, sacSelection]);

  // Update applicationOptions when acSelection, sacSelection, or ownerSelection changes
  useEffect(() => {
    if (acSelection && sacSelection && ownerSelection) {
      const selectedSac = data[acSelection][sacSelection] || [];
      const selectedOwnerApplications = selectedSac
        .filter(item => item.Owner === ownerSelection)
        .map(item => item.Applications);

      // Remove duplicate applications
      const uniqueApplications = [...new Set(selectedOwnerApplications)];
      setApplicationOptions(uniqueApplications);
    } else {
      setApplicationOptions([]);
    }
  }, [acSelection, sacSelection, ownerSelection]);

  return (
    <div>
      <EzyOptionSelector
        options={Object.keys(data)}
        label="Asset Class"
        addNew={true}
        selected={acSelection}
        onSelect={(v) => handleChange('acSelection', v)}
      />

      <EzyOptionSelector
        options={sacOptions}
        label="Sub Asset Class"
        addNew={true}
        selected={sacSelection}
        onSelect={(v) => handleChange('sacSelection', v)}
      />

      <EzyOptionSelector
        options={ownerOptions}
        label="Owner"
        addNew={true}
        selected={ownerSelection}
        onSelect={(v) => handleChange('ownerSelection', v)}
      />

      <EzyOptionSelector
        options={applicationOptions}
        label="Application"
        addNew={true}
        selected={applicationSelection}
        onSelect={(v) => handleChange('applicationSelection', v)}
      />

      {/* Display selected values */}
      <div>
        <h3>Selected Values:</h3>
        <p>AC: {acSelection}</p>
        <p>SAC: {sacSelection}</p>
        <p>Owner: {ownerSelection}</p>
        <p>Application: {applicationSelection}</p>
      </div>
    </div>
  );
};

export default DependentSelect;
