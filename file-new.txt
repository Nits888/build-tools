import React, { useState, useEffect } from 'react';
import data from './data.json'; // Adjust the path as necessary

// Mock EzyOptionSelector component for demonstration purposes
const EzyOptionSelector = ({ options, label, selected, onSelect }) => (
  <div>
    <label>{label}</label>
    <select value={selected} onChange={(e) => onSelect(e.target.value)}>
      <option value="">Select {label}</option>
      {options.length > 0 ? (
        options.map((option) => (
          <option key={option} value={option}>
            {option}
          </option>
        ))
      ) : (
        <option value="" disabled>No options available</option>
      )}
    </select>
  </div>
);

export const NewIssue: React.FC = () => {
  const [acSelection, setAcSelection] = useState('');
  const [sacSelection, setSacSelection] = useState('');
  const [ownerSelection, setOwnerSelection] = useState('');
  const [applicationSelection, setApplicationSelection] = useState('');

  // Options for dropdowns
  const acOptions = Object.keys(data);
  const [sacOptions, setSacOptions] = useState<string[]>([]);
  const [ownerOptions, setOwnerOptions] = useState<string[]>([]);
  const [applicationOptions, setApplicationOptions] = useState<string[]>([]);

  useEffect(() => {
    // Update SAC options based on AC selection
    if (acSelection) {
      setSacOptions(Object.keys(data[acSelection] || {}));
      setSacSelection(''); // Reset SAC selection
      setOwnerOptions([]); // Clear owner options
      setOwnerSelection(''); // Reset dependent fields
      setApplicationOptions([]); // Clear application options
      setApplicationSelection('');
    } else {
      setSacOptions([]); // Clear SAC options if no AC is selected
      setOwnerOptions([]);
      setOwnerSelection('');
      setApplicationOptions([]);
      setApplicationSelection('');
    }
  }, [acSelection]);

  useEffect(() => {
    // Update Owner options based on SAC selection
    if (acSelection && sacSelection) {
      const owners = [...new Set((data[acSelection][sacSelection] || []).map(item => item.Owner))];
      setOwnerOptions(owners);
      setOwnerSelection(''); // Reset Owner selection
      setApplicationOptions([]); // Clear application options
      setApplicationSelection('');
    } else {
      setOwnerOptions([]); // Clear owner options if no SAC is selected
      setApplicationOptions([]);
      setApplicationSelection('');
    }
  }, [acSelection, sacSelection]);

  useEffect(() => {
    // Update Application options based on Owner selection
    if (acSelection && sacSelection && ownerSelection) {
      const applications = [...new Set((data[acSelection][sacSelection] || [])
        .filter(item => item.Owner === ownerSelection)
        .map(item => item.Applications))];
      setApplicationOptions(applications);
      setApplicationSelection(''); // Reset application selection
    } else {
      setApplicationOptions([]); // Clear application options if no Owner is selected
    }
  }, [acSelection, sacSelection, ownerSelection]);

  const handleAcChange = (value) => {
    setAcSelection(value);
  };

  const handleSacChange = (value) => {
    setSacSelection(value);
  };

  const handleOwnerChange = (value) => {
    setOwnerSelection(value);
  };

  const handleApplicationChange = (value) => {
    setApplicationSelection(value);
  };

  const resetForm = () => {
    setAcSelection('');
    setSacOptions([]);
    setSacSelection('');
    setOwnerOptions([]);
    setOwnerSelection('');
    setApplicationOptions([]);
    setApplicationSelection('');
  };

  return (
    <div>
      <EzyOptionSelector
        options={acOptions}
        label="Asset Class"
        selected={acSelection}
        onSelect={handleAcChange}
      />

      <EzyOptionSelector
        options={sacOptions}
        label="Sub Asset Class"
        selected={sacSelection}
        onSelect={handleSacChange}
      />

      <EzyOptionSelector
        options={ownerOptions}
        label="Owner"
        selected={ownerSelection}
        onSelect={handleOwnerChange}
      />

      <EzyOptionSelector
        options={applicationOptions}
        label="Application"
        selected={applicationSelection}
        onSelect={handleApplicationChange}
      />

      <button onClick={resetForm}>Reset Form</button>

      {/* Display selected values */}
      <div>
        <h3>Selected Values:</h3>
        <p>AC: {acSelection}</p>
        <p>SAC: {sacSelection}</p>
        <p>Owner: {ownerSelection}</p>
        <p>Application: {applicationSelection}</p>
      </div>
    </div>
  );
};
