import requests

# Function to make an HTTP request to the specified URL using the given method
def call_api(url, method='GET', params=None, data=None, headers=None):
    """
    Function to make an HTTP request to the specified URL using the given method.

    Args:
        url (str): The URL of the API endpoint.
        method (str): The HTTP method to use (GET, POST, PUT, DELETE). Defaults to 'GET'.
        params (dict): Optional dictionary of URL parameters.
        data (dict): Optional dictionary of data to send in the request body (for POST and PUT requests).
        headers (dict): Optional dictionary of request headers.

    Returns:
        dict: The JSON response received from the API, or None if an error occurs.
    """
    try:
        response = requests.request(method, url, params=params, data=data, headers=headers)
        response.raise_for_status()  # Raise an error for bad status codes
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error calling API: {e}")
        return None

# Function to authenticate with Rundeck and trigger deployment job for a given list of nodes and job details
def trigger_job_for_nodes(nodes, job_name, username, password, rundeck_url):
    job_results = []
    
    # Construct argstring with all nodes
    argstring = ",".join([node["url"] for node in nodes])
    
    # Authenticate with Rundeck to get the session cookie
    login_data = {
        "j_username": username,
        "j_password": password
    }
    try:
        session = requests.Session()
        response = session.post(f"{rundeck_url}/j_security_check", data=login_data)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"Error authenticating with Rundeck: {e}")
        return job_results
    
    try:
        response = session.post(
            f"{rundeck_url}/api/14/job/{job_name}/run",
            json={"argString": argstring},
            headers={"Content-Type": "application/json"}
        )
        response.raise_for_status()
        
        if "id" in response.json():
            # If job was successfully triggered, get the execution ID
            execution_id = response.json()["id"]
            
            # Add the job details along with the execution ID to the job results
            job_results.append({
                "job_name": job_name,
                "nodes": nodes,
                "execution_id": execution_id
            })
            logger.info(f"Triggered Rundeck job '{job_name}' with arguments: {argstring}")
        else:
            logger.error(f"Error triggering Rundeck job '{job_name}'")
    except Exception as e:
        logger.error(f"An error occurred while triggering Rundeck job '{job_name}': {e}")
    
    return job_results
