Monitoring and Alerting Implementation for Our Platform
Introduction
In the fast-paced world of software development and platform management, robust monitoring and alerting systems are essential to ensure the health and performance of applications. Our team recently upgraded from a previous-generation implementation to a more robust and resilient monitoring stack. This blog post will walk you through our previous setup, the challenges we faced, the enhancements we've made in our new implementation, and the additional options we explored.

Last-Generation Implementation: Grafana Stack
Our previous monitoring and alerting system was built on the Grafana stack. Below are the key components of that setup:

Node Exporter: Collects hardware and OS metrics from nodes.
Blackbox Exporter: Probes endpoints to monitor their availability and performance.
Process Exporter: Tracks the metrics of specific processes, providing insights into application performance.
Prometheus (Federation Mode): Aggregates metrics from multiple sources, running in a federated mode to scale out.
Loki and Promtail: Collects and queries logs, offering a centralized log management solution.
Symphony Alerts and Email Alerts: Uses Grafana’s unified alerting system to notify us of any issues.
Dashboards: Comprehensive Grafana dashboards for visualizing metrics, alerts, and logs for each application on the platform.

Figure 1: Overview of the Last-Generation Monitoring and Alerting Setup

Challenges with the Previous Setup
Single Point of Failure: Prometheus in federated mode posed a single point of failure risk. If one instance went down, it could impact our monitoring capabilities.
File System Storage: Both Prometheus TSDB and Loki used file system storage. This setup limited scalability and posed risks in terms of data durability and recovery.
Next-Generation Implementation: Enhanced Grafana Stack
To address the limitations of our previous setup, we have migrated to a next-generation implementation, introducing several enhancements for improved resiliency and robustness.

Key Upgrades
Grafana Mimir:

Migration from Prometheus Federation: We replaced Prometheus federation with Grafana Mimir. Prometheus instances now send metrics to Mimir, which offers better scalability and robustness.
Object Storage: Mimir uses S3 object storage for its time-series database, ensuring higher durability and scalability.
Loki with S3 Object Storage:

Improved Log Management: The new Loki setup utilizes S3 object storage for logs, providing a more resilient and scalable solution.

Figure 2: Overview of the Next-Generation Monitoring and Alerting Setup

Benefits of the New Setup
Enhanced Resiliency: By leveraging object storage for both metrics and logs, we have mitigated the risks associated with file system storage. This change significantly reduces the potential for data loss and improves recovery times.
Scalability: Using S3 object storage allows our monitoring system to handle larger volumes of data without compromising performance. This scalability is crucial as our platform continues to grow.
Robustness: Grafana Mimir adds robustness to our metrics collection, ensuring that our monitoring system can withstand failures and continue to operate efficiently. This setup improves our overall system reliability and reduces downtime.
Exploring Additional Options
In our quest to build the best monitoring and alerting system, we also explored other technologies that could offer additional flexibility and robustness.

InfluxDB and Telegraf
InfluxDB, paired with Telegraf, provides another powerful option for collecting and storing metrics:

InfluxDB: A time-series database known for its high performance and scalability.
Telegraf: A plugin-driven server agent for collecting and reporting metrics, which offers extensive flexibility in terms of input sources and output destinations.
This combination allows for more granular data collection and the ability to integrate with various data sources, providing a highly customizable monitoring solution.


Figure 3: Overview of InfluxDB and Telegraf Setup

Thanos as an Alternative to Mimir
We also considered Thanos, a highly available Prometheus setup that provides long-term storage and global querying capabilities:

Thanos: Extends Prometheus by adding components that enable cross-cluster querying, deduplication, and storage in object stores like S3.
Thanos offers many of the same benefits as Mimir, such as improved scalability and resilience, but with a different architecture and feature set.


Figure 4: Overview of Thanos Setup

Visualization and Dashboards
Our dashboards in Grafana have also been upgraded to take advantage of the new capabilities. Here are some examples of the visualizations we have implemented:

System Health Dashboard:
Visualizes the overall health of the system, including CPU, memory, and disk usage.
Integrates metrics from Node Exporter, providing a holistic view of each node’s performance.

Figure 5: System Health Dashboard

Application Performance Dashboard:
Monitors specific application metrics using Process Exporter data.
Includes graphs for response times, error rates, and throughput.

Figure 6: Application Performance Dashboard

Endpoint Monitoring Dashboard:
Utilizes data from Blackbox Exporter to display the status and performance of various endpoints.
Highlights any downtime or performance issues, allowing for quick diagnostics and resolution.

Figure 7: Endpoint Monitoring Dashboard

Conclusion
The transition from our last-generation implementation to the current setup has significantly improved our monitoring and alerting capabilities. By addressing the shortcomings of the previous system and exploring additional options, we've built a more resilient, scalable, and robust platform that better supports our growing needs. As we continue to evolve, we remain committed to optimizing our infrastructure to ensure the highest levels of performance and reliability.

Stay tuned for future updates as we explore further enhancements and innovations in our monitoring and alerting systems.
