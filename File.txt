public List<NonEimIssues> getAllNonEimIssue() {
    var issues = nonEimIssueRepository.findAll();
    var allProject = projectRepository.findByNonEIMValidProjects();
    
    // Create a map to easily retrieve projects by their issueId
    var projectMap = allProject.stream()
                               .collect(Collectors.toMap(Project::getIssueId, project -> project));

    // Iterate through each issue and process them
    issues.forEach(issue -> {
        var issueId = issue.getIssueId();

        if (issueId != null) {
            var project = projectMap.get(issueId);

            if (project != null && project.getProjectId() != null) {
                // Fetch and set project costs
                var pCost = peopleCostRepository.findByprojectId(project.getProjectId());
                var iCost = infraCostRepository.findByprojectId(project.getProjectId());
                var oCost = otherCostRepository.findByprojectId(project.getProjectId());

                issue.setProjectPeopleCost(pCost.stream().mapToDouble(PeopleCost::getTotalCost).sum());
                issue.setProjectInfraCost(iCost.stream().mapToDouble(InfraCost::getTotalCost).sum());
                issue.setProjectOtherCost(oCost.stream().mapToDouble(OtherCost::getCost).sum());
                
                issue.setProjectRemediationYear(project.getProjectRemediationYear());
                issue.setProjectId(project.getProjectId());
            }
        }
    });

    return issues;
}
