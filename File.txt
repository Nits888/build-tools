import requests

# Function to make an HTTP request to the specified URL using the given method
def call_api(url, method='GET', params=None, data=None, headers=None):
    """
    Function to make an HTTP request to the specified URL using the given method.

    Args:
        url (str): The URL of the API endpoint.
        method (str): The HTTP method to use (GET, POST, PUT, DELETE). Defaults to 'GET'.
        params (dict): Optional dictionary of URL parameters.
        data (dict): Optional dictionary of data to send in the request body (for POST and PUT requests).
        headers (dict): Optional dictionary of request headers.

    Returns:
        dict: The JSON response received from the API, or None if an error occurs.
    """
    try:
        response = requests.request(method, url, params=params, data=data, headers=headers)
        response.raise_for_status()  # Raise an error for bad status codes
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error calling API: {e}")
        return None

# Function to authenticate with Rundeck and trigger deployment job for a given list of nodes and job details
def trigger_job_for_nodes(nodes, job_name, username, password, rundeck_url):
    job_results = []
    
    # Authenticate with Rundeck to get the session cookie
    login_data = {
        "j_username": username,
        "j_password": password
    }
    try:
        session = requests.Session()
        response = session.post(f"{rundeck_url}/j_security_check", data=login_data)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"Error authenticating with Rundeck: {e}")
        return job_results
    
    for node in nodes:
        try:
            response = session.post(
                node["url"], 
                json={"job_name": job_name},
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            
            if "id" in response.json():
                # If job was successfully triggered, get the execution ID
                execution_id = response.json()["id"]
                
                # Add the node's information along with the execution ID to the job results
                job_results.append({
                    "url": node["url"],
                    "token": node["token"],
                    "execution_id": execution_id
                })
                logger.info(f"Triggered Rundeck job '{job_name}' on node '{node['url']}'")
            else:
                logger.error(f"Error triggering Rundeck job '{job_name}' on node '{node['url']}'")
        except Exception as e:
            logger.error(f"An error occurred while triggering Rundeck job '{job_name}' on node '{node['url']}': {e}")
    
    return job_results

# Function to trigger deployment job in Rundeck
def trigger_deployment_job(rundeck_config, env_variables, build_type):
    job_results = {}
    if "RUNDECK_JOB" in env_variables and "RUNDECK_NODES" in env_variables:
        job_name = env_variables["RUNDECK_JOB"]
        nodes = env_variables["RUNDECK_NODES"].split(',')
        username = env_variables.get("RD_USR")
        password = env_variables.get("RD_PASS")
        rundeck_url = env_variables.get("RUNDECK_URL")
        job_results[''] = {"job_name": job_name, "nodes": trigger_job_for_nodes(nodes, job_name, username, password, rundeck_url)}
                
    elif rundeck_config:
        for env_name, env_details in rundeck_config.items():
            if env_name in env_variables.get("ENV_NAME", ""):
                nodes = env_details.get(build_type, {}).get("nodes", [])
                job_name = env_details.get(build_type, {}).get("job_name")
                username = env_variables.get("RD_USR")
                password = env_variables.get("RD_PASS")
                rundeck_url = env_variables.get("RUNDECK_URL")
                
                # Call the function to trigger the job for the environment's nodes
                job_results[env_name] = {"job_name": job_name, "nodes": trigger_job_for_nodes(nodes, job_name, username, password, rundeck_url)}
    else:
        raise ValueError("No Rundeck configuration found.")
    
    return job_results
