import requests
import logging

logger = logging.getLogger(__name__)

def call_api(url, method='GET', params=None, data=None, headers=None):
    """
    Function to make an HTTP request to the specified URL using the given method.

    Args:
        url (str): The URL of the API endpoint.
        method (str): The HTTP method to use (GET, POST, PUT, DELETE). Defaults to 'GET'.
        params (dict): Optional dictionary of URL parameters.
        data (dict): Optional dictionary of data to send in the request body (for POST and PUT requests).
        headers (dict): Optional dictionary of request headers.

    Returns:
        dict: The JSON response received from the API.

    Raises:
        Exception: If the API request fails or returns an error status code.
    """
    try:
        response = requests.request(method, url, params=params, data=data, headers=headers)
        response.raise_for_status()  # Raise an error for bad status codes
        
        if response.status_code == 204:
            return None
        
        return response.json()
    
    except requests.exceptions.RequestException as e:
        logger.error(f"Error calling API: {e}")
        raise Exception("Failed to connect to the API.")

    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON response: {e}")
        raise Exception("Failed to parse JSON response from the API.")

    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP error occurred: {e}")
        raise Exception(f"HTTP error occurred: {e}")

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")
        raise Exception("An unexpected error occurred while calling the API.")
